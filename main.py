import os
import sqlite3
import logging
import base64
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456"))
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "admin")
DB_PATH = os.getenv("DB_PATH", "/tmp/data/jobs.db")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ /tmp
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")  # –ù–∞–ø—Ä–∏–º–µ—Ä, "username/telegram-bot-data"
GITHUB_PATH = os.getenv("GITHUB_PATH", "jobs.db")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_states = {}
user_edit_states = {}

def init_db():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_dir = os.path.dirname(DB_PATH)
    if db_dir:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
        try:
            os.makedirs(db_dir, exist_ok=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {db_dir}: {e}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å GitHub, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
    if not os.path.exists(DB_PATH) and GITHUB_TOKEN and GITHUB_REPO:
        try:
            url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_PATH}"
            headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3.raw"}
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                with open(DB_PATH, "wb") as f:
                    f.write(base64.b64decode(response.json()["content"]))
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å GitHub")
            else:
                logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ GitHub, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    telegram_id INTEGER PRIMARY KEY,
                    role TEXT,
                    employer_code TEXT,
                    subscription_active INTEGER DEFAULT 0,
                    subscription_start TEXT
                )
            ''')
            cur.execute('''
                CREATE TABLE IF NOT EXISTS vacancies (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employer_code TEXT,
                    city TEXT,
                    description TEXT
                )
            ''')
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def backup_db():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GitHub
    if GITHUB_TOKEN and GITHUB_REPO and os.path.exists(DB_PATH):
        try:
            with open(DB_PATH, "rb") as f:
                content = base64.b64encode(f.read()).decode("utf-8")
            url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_PATH}"
            headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            response = requests.get(url, headers=headers)
            sha = response.json().get("sha") if response.status_code == 200 else None
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            data = {
                "message": "Update jobs.db",
                "content": content,
                "branch": "main"
            }
            if sha:
                data["sha"] = sha
            response = requests.put(url, headers=headers, json=data)
            if response.status_code in [200, 201]:
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ GitHub")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")
    kb.button(text="–ò—â—É —Ä–∞–±–æ—Ç—É")
    if message.from_user.id == ADMIN_ID:
        kb.button(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "–Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")
async def employer_start(message: Message):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
            user = cur.fetchone()
            if not user:
                employer_code = f"EMP{message.from_user.id}"
                cur.execute(
                    "INSERT INTO users (telegram_id, role, employer_code, subscription_active) VALUES (?, ?, ?, 0)",
                    (message.from_user.id, "employer", employer_code)
                )
                conn.commit()
                backup_db()
            else:
                employer_code = user[2]

        kb = ReplyKeyboardBuilder()
        kb.button(text="–û–ø–ª–∞—Ç–∏–ª")
        await message.answer(
            f"‚úÖ –í–∞—à –∫–æ–¥ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: <b>{employer_code}</b>\n\n"
            f"üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: @{ADMIN_USERNAME}\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª</b>.",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ employer_start: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "–û–ø–ª–∞—Ç–∏–ª")
async def check_payment(message: Message):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT subscription_active, subscription_start FROM users WHERE telegram_id = ?", (message.from_user.id,))
            row = cur.fetchone()
            if row and row[0] == 1:
                start_date = datetime.strptime(row[1], "%Y-%m-%d")
                if datetime.now() - start_date <= timedelta(days=30):
                    kb = ReplyKeyboardBuilder()
                    kb.button(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
                    kb

                    .button(text="–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
                    kb.button(text="–ü–æ–¥–ø–∏—Å–∫–∞")
                    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.as_markup(resize_keyboard=True))
                    return
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def add_vacancy(message: Message):
    user_states.pop(message.from_user.id, None)
    user_edit_states.pop(message.from_user.id, None)
    user_states[message.from_user.id] = {"step": "city"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")

@dp.message(F.text == "–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def my_vacancies(message: Message):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT employer_code, subscription_active, subscription_start FROM users WHERE telegram_id = ?", (message.from_user.id,))
            user = cur.fetchone()
            if not user or user[1] != 1:
                return await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            employer_code = user[0]
            cur.execute("SELECT id, description FROM vacancies WHERE employer_code = ?", (employer_code,))
            rows = cur.fetchall()
            if not rows:
                return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
            kb = ReplyKeyboardBuilder()
            for vid, desc in rows:
                short_desc = desc if len(desc) <= 30 else desc[:27] + "..."
                kb.button(text=f"{vid}: {short_desc}")
                kb.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {vid}")
                kb.button(text=f"–£–¥–∞–ª–∏—Ç—å {vid}")
            kb.adjust(1)
            await message.answer("–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=kb.as_markup(resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_vacancies: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text.regexp(r"^–£–¥–∞–ª–∏—Ç—å \d+$"))
async def delete_vacancy(message: Message):
    try:
        vid = int(message.text.split()[1])
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (message.from_user.id,))
            user = cur.fetchone()
            if not user:
                return await message.answer("–û—à–∏–±–∫–∞. –í—ã –Ω–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.")
            employer_code = user[0]
            cur.execute(" DEL
ETE FROM vacancies WHERE id = ? AND employer_code = ?", (vid, employer_code))
            if cur.rowcount:
                conn.commit()
                backup_db()
                await message.answer(f"–í–∞–∫–∞–Ω—Å–∏—è #{vid} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_vacancy: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text.regexp(r"^–ò–∑–º–µ–Ω–∏—Ç—å \d+$"))
async def start_edit(message: Message):
    try:
        vid = int(message.text.split()[1])
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (message.from_user.id,))
            user = cur.fetchone()
            if not user:
                return await message.answer("–û—à–∏–±–∫–∞. –í—ã –Ω–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.")
            employer_code = user[0]
            cur.execute("SELECT id FROM vacancies WHERE id = ? AND employer_code = ?", (vid, employer_code))
            if not cur.fetchone():
                return await message.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        user_edit_states[message.from_user.id] = vid
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ #{vid}:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_status(message: Message):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT subscription_start FROM users WHERE telegram_id = ?", (message.from_user.id,))
            row = cur.fetchone()
            if not row or not row[0]:
                return await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            start = datetime.strptime(row[0], "%Y-%m-%d")
            days_left = 30 - (datetime.now() - start).days
            if days_left < 0:
                cur.execute("UPDATE users SET subscription_active = 0, subscription_start = NULL WHERE telegram_id = ?", (message.from_user.id,))
                conn.commit()
                backup_db()
                await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            else:
                await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days_left}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscription_status: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "–ò—â—É —Ä–∞–±–æ—Ç—É")
async def search_job(message: Message):
    user_states[message.from_user.id] = {"step": "worker_city"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

@dp.message(F.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    kb = ReplyKeyboardBuilder()
    kb.button(text="/vacancies")
    kb.button(text="/sql SELECT * FROM users")
    kb.button(text="/sql SELECT * FROM vacancies")
    kb.button(text="/confirm_subscription")
    kb.adjust(1)
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "/confirm_subscription")
async def confirm_subscription_start(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    user_states[message.from_user.id] = {"step": "confirm_subscription"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ employer_code –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")

@dp.message(F.text.startswith("/sql "))
async def sql_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    query = message.text[5:]
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute(query)
            if query.lower().startswith("select"):
                rows = cur.fetchall()
                if not rows:
                    return await message.answer("–ü—É—Å—Ç–æ.")
                result = "\n".join(str(row) for row in rows)
                await message.answer(f"<pre>{result}</pre>", parse_mode="HTML")
            else:
                conn.commit()
                backup_db()
                await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/vacancies")
async def admin_vacancies(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT id, employer_code, city, description FROM vacancies")
            rows = cur.fetchall()
            if not rows:
                return await message.answer("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
            text = ""
            for row in rows:
                text += f"{row[0]} | {row[1]} | {row[2]} | {row[3][:40]}...\n"
            await message.answer(f"<pre>{text}</pre>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_vacancies: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def handle_input(message: Message):
    uid = message.from_user.id
    try:
        if uid in user_edit_states:
            vid = user_edit_states.pop(uid)
            with sqlite3.connect(DB_PATH) as conn:
                cur = conn.cursor()
                cur.execute("UPDATE vacancies SET description = ? WHERE id = ?", (message.text.strip(), vid))
                conn.commit()
                backup_db()
            return await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        if uid in user_states:
            state = user_states[uids]
            if state.get("step") == "city":
                state["city"] = message.text.strip()
                state["step"] = "desc"
                return await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
            elif state.get("step") == "desc":
                with sqlite3.connect(DB_PATH) as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (uid,))
                    row = cur.fetchone()
                    if not row:
                        return await message.answer("–û—à–∏–±–∫–∞. –í—ã –Ω–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.")
                    cur.execute("INSERT INTO vacancies (employer_code, city, description) VALUES (?, ?, ?)", (row[0],olf state["city"], message.text.strip()))
                    conn.commit()
                    backup_db()
                user_states.pop(uid)
                return await message.answer("–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            elif state.get("step") == "worker_city":
                with sqlite3.connect(DB_PATH) as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT id, city, description FROM vacancies WHERE city LIKE ?", (f"%{message.text.strip()}%",))
                    rows = cur.fetchall()
                if not rows:
                    return await message.answer("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.")
                result = ""
                for row in rows:
                    result += f"#{row[0]} | {row[1]}: {row[2][:50]}...\n"
                user_states.pop(uid)
                return await message.answer(result)
            elif state.get("step") == "confirm_subscription":
                input_text = message.text.strip()
                with sqlite3.connect(DB_PATH) as conn:
                    cur = conn.cursor()
                    if input_text.isdigit():
                        cur.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (int(input_text),))
                    else:
                        cur.execute("SELECT telegram_id FROM users WHERE employer_code = ?", (input_text,))
                    row = cur.fetchone()
                    if not row:
                        user_states.pop(uid)
                        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    telegram_id = row[0]
                    cur.execute(
                        "UPDATE users SET subscription_active = 1, subscription_start = ? WHERE telegram_id = ?",
                        (datetime.now().strftime("%Y-%m-%d"), telegram_id)
                    )
                    conn.commit()
                    backup_db()
                user_states.pop(uid)
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {telegram_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
                try:
                    await bot.send_message(
                        telegram_id,
                        "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.",
                        reply_markup=ReplyKeyboardBuilder()
                            .button(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
                            .button(text="–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
                            .button(text="–ü–æ–¥–ø–∏—Å–∫–∞")
                            .as_markup(resize_keyboard=True)
                    )
                except Exception as e:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await message.answer("–ù–∞–ø–∏—à–∏ /start")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_input: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    init_db()
    import asyncio
    asyncio.run(dp.start_polling(bot))
